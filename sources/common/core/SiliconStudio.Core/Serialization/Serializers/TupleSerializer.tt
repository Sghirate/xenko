<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<# int iterationCount = 4; #>
// Copyright (c) 2012-2014 Silicon Studio Corporation (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
//
// AUTOGENERATED, do not modify!

using System;
using SiliconStudio.Core.Reflection;

namespace SiliconStudio.Core.Serialization.Serializers
{
<#
for (int i = 1; i <= iterationCount; ++i)
{ #>
    /// <summary>
    /// Serializer for a <#=i#>-tuple.
    /// </summary>
<# for (int j = 0; j < i; ++j) { #>
    /// <typeparam name="T<#=j + 1#>">The type of the tuple's component <#=j + 1#>.</typeparam>
<# } #>
    [DataSerializerGlobal(typeof(TupleSerializer<<#= new string(',', i - 1) #>>), typeof(Tuple<<#= new string(',', i - 1) #>>), DataSerializerGenericMode.GenericArguments)]
    public class TupleSerializer<T1<# for (int j = 1; j < i; ++j) { #>, T<#=j + 1#><# } #>> : DataSerializer<Tuple<T1<# for (int j = 1; j < i; ++j) { #>, T<#=j + 1#><# } #>>>
    {
<# for (int j = 0; j < i; ++j) { #>
        private DataSerializer<T<#=j + 1#>> item<#=j + 1#>Serializer;
<# } #>

        /// <inheritdoc/>
        public override void Initialize(SerializerSelector serializerSelector)
        {
<# for (int j = 0; j < i; ++j) { #>
            item<#=j + 1#>Serializer = MemberSerializer<T<#=j + 1#>>.Create(serializerSelector);
<# } #>
        }

        /// <inheritdoc />
        public override void Serialize(ref Tuple<T1<# for (int j = 1; j < i; ++j) { #>, T<#=j + 1#><# } #>> obj, ArchiveMode mode, SerializationStream stream)
        {
            if (mode == ArchiveMode.Serialize)
            {
<# for (int j = 0; j < i; ++j) { #>
                item<#=j + 1#>Serializer.Serialize(obj.Item<#=j + 1#>, stream);
<# } #>
            }
            else
            {
<# for (int j = 0; j < i; ++j) { #>
                var item<#=j + 1#> = default(T<#=j + 1#>);
<# } #>
<# for (int j = 0; j < i; ++j) { #>
                item<#=j + 1#>Serializer.Serialize(ref item<#=j + 1#>, mode, stream);
<# } #>
                obj = new Tuple<T1<# for (int j = 1; j < i; ++j) { #>, T<#=j + 1#><# } #>>(item1<# for (int j = 1; j < i; ++j) { #>, item<#=j + 1#><# } #>);
            }
        }
    }

<# } #>
}
